#!/bin/bash
#
# should be run from minimy base dir
# Example:
#     install/installminimy
#
#+--------------------------------------------------------------------------+
function usage
# Give help to the user
#+--------------------------------------------------------------------------+
 {
  : SOURCE: ${BASH_SOURCE}
  : STACK:  ${FUNCNAME[@]}

  echo "Name: lsskills - List OVOS/Neon skills "
  echo "Usage: lsskills [OPTIONS] [PATTERN]"
  echo "Where: PATTERN is an optional string pattern to search for"
  echo ""
  echo "OPTIONS:"
  echo "  -h|--help           Give help (this screen)"
  echo "  -H|--hub [HUB]      Specify the 'hub' server"
  echo "  -m|--musicDir [DIR] Directory with music files"
  echo "  -v|--verbose        Verbose output"
  echo "  -x|--debug          Print commands and arguments as they are executed"
  exit 51
 }                                         # usage()

#+--------------------------------------------------------------------------+
function parseArgs
# Parse arguments
# Args: All arguments passed into script
#+--------------------------------------------------------------------------+
 {
  : SOURCE: ${BASH_SOURCE}
  : STACK:  ${FUNCNAME[@]}

  while [ -n "$1" ]                        # loop through args passed in
  do
    case "$1" in
      -h|--help)
        usage
        ;;
      --hub)
        if [ $# = 0 ]; then                # hostname not passed in
          echo "ERROR! HUB not passed in after $1"
          usage                            # give help
        fi
        shift                              # get to next arg
        hub=$1
        ;;
      -v|--verbose)
        verbose=2
        ;;
      -x|--debug)                          # turn trace on
         set -vx
         ;;
      *)
        echo "ERROR: Too many arguments: $1"
        usage
        ;;
    esac
    shift                                  # move to next arg
  done
 }                                         # parseArgs()

#+--------------------------------------------------------------------------+
function setMinimyVars
# Set Minimy variables in mmconfig.yaml:                 
# - hub: host name of server doing STT and Q&A
# - musicDir: directory with music files
#+--------------------------------------------------------------------------+
 {
  : SOURCE: ${BASH_SOURCE}
  : STACK:  ${FUNCNAME[@]}

  if [ ${#hub} = 0 ]; then                 # hub not set with args
    hub=`grep "    Hub:" $configFile | awk '{print $2}'` # get hub in config file
    echo -n "Host name of hub server [$hub]: "
    read hub
  fi
  if [ ${#hub} != 0 ]; then                # new value was supplied
    sed -i "s/    Hub: .*/    Hub: $hub/g" $configFile # reset hub server
  fi
  if [ ${#MusicDir} = 0 ]; then            # music dir not set with args
    musicDir=`grep "    MusicDir:" $configFile | awk '{print $2}'` # get music dir in config file
    echo -n "Directory with music files [$musicDir]: "
    read newMusicDir
    if [ ${#newMusicDir} != 0 ]; then      # new music dir was supplied
      sed -i "s/    MusicDir: .*/    MusicDir: $hub/g" $configFile # reset hub server
    fi
  fi
 }                                         # setMinimyVars()

#+--------------------------------------------------------------------------+
function runCmd
# run a command, report time spent and exit if it fails
#+--------------------------------------------------------------------------+
 {
  : SOURCE: ${BASH_SOURCE}
  : STACK:  ${FUNCNAME[@]}

  cmd="$@"                                 # get all args
  let stepNum=$stepNum+1
  echo | tee -a $logFile
  echo "Step $stepNum: $cmd ..." 2>&1 | tee -a $logFile # show the command and send to output file
  eval $cmd >> $logFile 2>&1               # run command and log output
  rc=$?
  if [ "$rc" != 0 ]; then                  # it failed
    echo "ERROR: $cmd returned $rc" | tee -a $logFile
    echo "Log file: $logFile"
    exit 1
  else
    echo "rc = 0"
  fi
  let curSecs=$SECONDS
  let et=$curSecs-$lastSecs
  echo "Step $stepNum took $et seconds" | tee -a $logFile
  lastSecs=$curSecs
 }                                         # runCmd()

#+--------------------------------------------------------------------------+
function checkEnv
# Check that the base directory and Minimy config file exist
#+--------------------------------------------------------------------------+
 {
  : SOURCE: ${BASH_SOURCE}
  : STACK:  ${FUNCNAME[@]}

  if [ ! -d $baseDir ]; then
    echo "ERROR: base directory $baseDir not found"
    exit 2
  fi
  if [ ! -f $configFile ]; then
    echo "ERROR: Minimy config file $configFile not found"
    exit 3
  fi
 }                                         # checkEnv()

#+--------------------------------------------------------------------------+
function buildVenv                              
# Build the virtual environment
#+--------------------------------------------------------------------------+
 {
  : SOURCE: ${BASH_SOURCE}
  : STACK:  ${FUNCNAME[@]}

  echo
  echo "Running $0 at `date` ..." > $logFile # create a new log file
  echo | tee -a $logFile
  echo "cd to $HOME/minimy ..." | tee -a $logFile
  cd $HOME/minimy
  echo | tee -a $logFile
  echo "Installing virtual environment ..." | tee -a $logFile
  runCmd sudo apt-get install python3-venv
  runCmd sudo apt-get install python3-dev
  runCmd python3 -m venv minimy_venv
  echo | tee -a $logFile
  echo "Upgrading pip ..." | tee -a $logFile
  local pipCmd="$HOME/minimy/minimy_venv/bin/pip" # use pip from the venv
  runCmd $pipCmd install --upgrade pip
  echo | tee -a $logFile
  echo "Activating virtual environment ..." | tee -a $logFile
  runCmd source minimy_venv/bin/activate   # start virtual environment
  echo | tee -a $logFile
  echo "Upgrading wheel and setuptools ..." | tee -a $logFile
  runCmd $pipCmd install --upgrade wheel setuptools
  runCmd sudo apt-get install -y python3-dev build-essential portaudio19-dev mpg123 ffmpeg curl wget
  runCmd sudo apt-get install -y libavutil-dev libswscale-dev libswresample-dev libavfilter-dev
  runCmd sudo apt-get install -y libavcodec-dev libavformat-dev libavdevice-dev redis
  echo | tee -a $logFile
  local pythonVer=`python -V | awk '{print $2}' | awk -F'.' '{print $1"."$2}'`
  echo "Python version: $pythonVer ..." | tee -a $logFile
  local pythonCmd="$HOME/minimy/minimy_venv/bin/python$pythonVer" # use python from the venv
  runCmd $pythonCmd -m pip install --force-reinstall https://github.com/yt-dlp/yt-dlp/archive/master.tar.gz
  echo "Installing yt-dlp and requirements.txt ..." | tee -a $logFile
  cd $baseDir
  runCmd pip install --no-binary :all: regex # force pip to ignore old wheels and build fresh
  runCmd $pipCmd install lingua_franca
  runCmd $pipCmd install -r install/requirements.txt
  echo "Installing local STT whisper" | tee -a $logFile
  runCmd $pipCmd install git+https://github.com/openai/whisper.git
  runCmd $pipCmd install datasets
  runCmd $pipCmd install gpiozero
  runCmd $pipCmd install keyboard
  runCmd $pipCmd install lgpio
  runCmd $pipCmd install optimum
  runCmd $pipCmd install quart
  runCmd $pipCmd install redis
  runCmd $pipCmd install whisper
  runCmd $pipCmd install youtube-search
  runCmd $pipCmd install --upgrade --upgrade-strategy eager "optimum[neural-compressor]"
  echo | tee -a $logFile

  echo "Installing local ytplay/ytadd in /usr/local/sbin ..." | tee -a $logFile
  runCmd sudo cp install/ytplay /usr/local/sbin
  if [ ! -f /usr/local/sbin/ytadd ]; then
    runCmd sudo ln -s /usr/local/sbin/ytplay /usr/local/sbin/ytadd
  fi
  runCmd $pipCmd install youtube-search-python
  echo | tee -a $logFile
  cd $HOME/minimy/framework/services/intent/nlp/local

  echo "Building CMU link grammar ..." | tee -a $logFile
  runCmd tar xzf cmu_link-4.1b.tar.gz
  echo | tee -a $logFile
  echo "cd to link-4.1b ..." | tee -a $logFile
  cd link-4.1b
  runCmd make

  echo "Installing Local STT ..."| tee -a $logFile
  echo | tee -a $logFile
  cd $baseDir/install
  echo "Loading the whisper model"
  if [ "$pythonVer" = "3.11" ]; then 
    runCmd $pipCmd install --force-reinstall numpy==1.24 # numpy must be 1.24 for building whisper
  fi
  #source $HOME/minimy/minimy_venv/bin/activate # start the venv
  runCmd $pythonCmd $baseDir/bldwhisper.py $baseDir/jfk.wav # build the base.en model
  #deactivate                                   # stop the venv

  echo "Installing Local TTS ..."| tee -a $logFile
  echo | tee -a $logFile
  cd $baseDir/framework/services/tts/local
  if [ ! -d piper ]; then                  # not downloaded yet
    runCmd wget -q https://github.com/rhasspy/piper/releases/download/v1.2.0/piper_arm64.tar.gz
    runCmd tar xzf piper_arm64.tar.gz      # creates piper dir
    cd piper                               # get a male and a female voice
    runCmd wget -q https://huggingface.co/rhasspy/piper-voices/resolve/v1.0.0/en/en_US/hfc_female/medium/en_US-hfc_female-medium.onnx
    runCmd wget -q https://huggingface.co/rhasspy/piper-voices/resolve/v1.0.0/en/en_US/hfc_female/medium/en_US-hfc_female-medium.onnx.json
    runCmd wget -q https://huggingface.co/rhasspy/piper-voices/resolve/v1.0.0/en/en_US/hfc_male/medium/en_US-hfc_male-medium.onnx
    runCmd wget -q https://huggingface.co/rhasspy/piper-voices/resolve/v1.0.0/en/en_US/hfc_male/medium/en_US-hfc_male-medium.onnx.json
    echo "Piper has been installed!" | ./piper --model en_US-hfc_male-medium.onnx --output_file testpiper.wav
    rc=$?
    if [ "$rc" != 0 ]; then
      echo "ERROR: piper test command returned $rc" | tee -a $logFile
      exit 4
    fi
    runCmd aplay testpiper.wav             # play audio file
  else                                     # assume it is installed
    echo "Skipping piper - already installed ..."| tee -a $logFile
  fi

  cd $baseDir
  echo "Copying and enabling systemd .mount and .service files ..." | tee -a $logFile 
  runCmd sudo cp install/home-pi-minimy-logs.mount /etc/systemd/system 
  runCmd sudo systemctl enable home-pi-minimy-logs.mount 
  runCmd sudo cp install/home-pi-minimy-tmp.mount /etc/systemd/system 
  runCmd sudo systemctl enable home-pi-minimy-tmp.mount 
  runCmd sudo cp install/minimy.service /etc/systemd/system 
  runCmd sudo systemctl enable minimy
  echo | tee -a $logFile
  echo "Copying Minimy scripts to /usr/local/sbin ..."| tee -a $logFile
  minimyScripts="startminimy stopminimy restartminimy grm cmpcode countminimy minimyver test_ws.py"
  echo | tee -a $logFile
  echo "cd to $HOME/minimy/install ..." | tee -a $logFile
  cd $HOME/minimy/install
  runCmd sudo cp $minimyScripts /usr/local/sbin 
  echo | tee -a $logFile
  echo "cd to /usr/local/sbin ..." | tee -a $logFile
  cd /usr/local/sbin
  runCmd sudo chown $USER:$USER $minimyScripts
  runCmd sudo cp $HOME/minimy/install/great_songs.m3u /var/lib/mpd/playlists
  #echo | tee -a $logFile
  #echo "Starting virtual environment ..." | tee -a $logFile
  #source $HOME/minimy/minimy_venv/bin/activate
  echo " "
  echo "Install Complete at `date`" | tee -a $logFile
 }                                         # buildVenv()

# global variables
baseDir="$HOME/minimy"
configFile="$baseDir/install/mmconfig.yml" # Minimy config file
hub=""                                     # hub server
let lastSecs=$SECONDS
timeStamp=`date +"%y-%m-%d-%H-%M-%S"`
logFile="$HOME/$timeStamp-install.out"     # output file
musicDir=""                                # directory with music files
let stepNum=0

# main()
checkEnv                                   # check the environment
parseArgs $@                               # parse arguments
setMinimyVars                              # set config file variables
buildVenv                                  # do the work
let min=$SECONDS/60
let sec=$SECONDS%60
if [ $sec -lt 10 ]; then                   # add a leading 0
  sec="0$sec"
fi
echo "Successfully installed Minimy in $min:$sec" | tee -a $logFile
echo "Log file: $logFile"

