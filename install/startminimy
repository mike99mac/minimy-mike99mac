#!/bin/bash
#
# startminimy - start the minimy personal voice assistant and music player
# 
#+--------------------------------------------------------------------------+
function checkEnv
# Check the environment 
#+--------------------------------------------------------------------------+
 {
  : SOURCE: ${BASH_SOURCE}
  : STACK:  ${FUNCNAME[@]}

  if [ ! -d $baseDir ]; then
    echo "ERROR: base directory $baseDir not found"
    echo "To clone Minimy to your home directory: "
    echo "cd; git clone https://github.com/mike99mac/minimy-mike99mac" 
    exit 1
  fi  
  ps -ef | grep "python3.*minimy" | grep -v grep
  if [ $? = 0 ]; then                      # minimy is running
    echo "It appears Minimy is already running!"
    exit 1
  fi
 } 
 
#+--------------------------------------------------------------------------+
function umountTmpfs
# Unmount a temporary file system if it is mounted
# Arg 1: file system to umount
#+--------------------------------------------------------------------------+
 {
  : SOURCE: ${BASH_SOURCE}
  : STACK:  ${FUNCNAME[@]}

  fileSystem=$1
  echo "Unmounting tmpfs file system $fileSystem..."
  fsType=`mount | grep $fileSystem | awk '{print $1}'` # check if it's mounted
  if [ "$fsType" = "tmpfs" ]; then
    sudo umount $fileSystem
  fi
 }                                         # umountTmpfs()

#+--------------------------------------------------------------------------+
function mountTmpfs
# Mount a file system in a tmpfs using systemd .mount files
# Arg 1    : systemd .mount file to use
# Args 2-n : description of the file system
#+--------------------------------------------------------------------------+
 {
  : SOURCE: ${BASH_SOURCE}
  : STACK:  ${FUNCNAME[@]}

  local mountFile=$1
  shift
  local desc="$@"                          # remaining args are desription

  local mountDir=`echo $mountFile | sed 's:-:/:g'`
  local fsType=`mount | grep $mountDir | awk '{print $5}'`
  if [ "$fsType" = tmpfs ]; then           # already a tmpfs
    echo "$mountDir is already a tmpfs"
    return
  fi
  echo "making directory $fileSystem a tmpfs ..."
  cmd="sudo systemctl start $mountFile"
  eval $cmd
  rc=$?
  if [ "$rc" != 0 ]; then
    echo "WARNING $cmd returned $rc - proceeding without tmpfs $desc"
  else
    echo "$cmd was successful"
  fi
 }                                         # mountTmpfs()

#+--------------------------------------------------------------------------+
function mountUmountDirs
# make log files directories tmpfs's to prolong the life of the micro-SD card
#+--------------------------------------------------------------------------+
 {
  : SOURCE: ${BASH_SOURCE}
  : STACK:  ${FUNCNAME[@]}

  # unmount and remount a tmpfs over /var/log and $HOME/minimy/logs
  umountTmpfs $HOME/minimy/logs
  mountTmpfs home-$USER-minimy-logs.mount Minimy log directory

  # mount a tmpfs over $HOME/minimy/tmp and create three subdirectories
  echo
  umountTmpfs $HOME/minimy/tmp
  mountTmpfs home-$USER-minimy-tmp.mount Minimy temp directory
  sleep 1
  mkdir $baseDir/tmp/save_audio $baseDir/tmp/save_text $baseDir/tmp/save_tts
 }                                         # mountUmountDirs()

#+--------------------------------------------------------------------------+
function startSystem 
# Start Minimy base components 
#+--------------------------------------------------------------------------+
 {
  : SOURCE: ${BASH_SOURCE}
  : STACK:  ${FUNCNAME[@]}

  cd $baseDir
  source minimy_venv/bin/activate          # start the minimy virtual environment
  echo
  echo "Starting Local STT Server ..."
  cd $baseDir
  python3 framework/services/stt/local/whisper/local_whisper.py &  
  echo 
  echo "Starting Local TTS Server ..."
  deactivate                               # minimy_venv
  cd $baseDir/framework/services/tts/local/mimic3
  if [ ! -d .venv ]; then                  # venv not found
    echo "ERROR: directory $baseDir/framework/services/tts/local/mimic3/.venv not found"
    exit 4
  fi
  source .venv/bin/activate                # start the mimic venv
  bin/mimic3 --model-dir voices/apope  > mimic3_tts.log 2>&1 &
  deactivate                               # exit mimic venv
  cd $baseDir
  source minimy_venv/bin/activate          # start the minimy virtual environment
  export PYTHONPATH=`pwd`   
  export SVA_BASE_DIR=`pwd`
  export GOOGLE_APPLICATION_CREDENTIALS="/home/pi/minimy/install/my-google-key.json"
  echo
  echo "Starting Message Bus ..."
  cd $baseDir/bus
  python3 MsgBus.py &
  sleep 2
  echo
  echo "Starting system skills ..."
  cd $baseDir/skills/system_skills
  python3 skill_system.py &
  sleep 1
  echo
  echo "Starting Intent Service ..."
  cd $baseDir 
  python3 framework/services/intent/intent.py &
  sleep 2 
  echo
  echo "Starting Media Service ..."
  python3 framework/services/output/media_player.py &
  python3 framework/services/tts/tts.py &
  python3 framework/services/stt/stt.py &
  sleep 1
 }                                         # startSystem() 

#+--------------------------------------------------------------------------+
function loadOneSkill 
# load one skill from __init__.py
# Arg 1    : Skill directory 
# Args 2-n : description of the skill
#+--------------------------------------------------------------------------+
 {
  : SOURCE: ${BASH_SOURCE}
  : STACK:  ${FUNCNAME[@]}
  
  local theDir=$1
  shift
  local desc="$@"

  if [ ! -d $theDir ]; then 
    echo "ERROR: Directory $theDir not found"
    exit 1
  fi
  cd $theDir
  echo "Loading $desc ..."
  python3 __init__.py $PWD &
 }                                         # loadOneSkill{}

#+--------------------------------------------------------------------------+
function loadSystemSkills
# load all system skills
#+--------------------------------------------------------------------------+
 {
  : SOURCE: ${BASH_SOURCE}
  : STACK:  ${FUNCNAME[@]}

  echo 
  echo "Starting System Skills ..."
  cd $baseDir
  python3 skills/system_skills/skill_fallback.py &
  python3 skills/system_skills/skill_media.py &
  python3 skills/system_skills/skill_volume.py &
  python3 skills/system_skills/skill_alarm.py &
  sleep 2 
 }                                       # loadSystemSkills() 

#+--------------------------------------------------------------------------+
function loadUserSkills
# load all user skills
#+--------------------------------------------------------------------------+
 {
  : SOURCE: ${BASH_SOURCE}
  : STACK:  ${FUNCNAME[@]}

  echo " "
  echo "Starting User Skills ..."
  cd $baseDir/skills/user_skills
  loadOneSkill help Help skill
  # do not load these skills for now
  # loadOneSkill ../rfm RFM skill
  # loadOneSkill ../youtube YouTube skill 
  # loadOneSkill ../npr_news NPR News skill 
  # loadOneSkill ../ha_skill Home Assistant skill
  # loadOneSkill ../email Email skill
  # loadOneSkill ../example1 Example 1 skill 
  # loadOneSkill ../wiki Wiki skill
  loadOneSkill ../timedate TimeDate skill 
  loadOneSkill ../weather Weather skill 
  loadOneSkill ../connectivity Connectivity skill 
  loadOneSkill ../mpc music and news skill  
  sleep 3
 }                                         # loadUserSkills()

#+--------------------------------------------------------------------------+
function loadOtherServices
# load other processes 
#+--------------------------------------------------------------------------+
 {
  : SOURCE: ${BASH_SOURCE}
  : STACK:  ${FUNCNAME[@]}
  
  cd $baseDir
  echo "Starting buttons ..."
  python3 framework/services/input/buttons.py &
  echo 
  echo "Starting the mic ..."
  python3 framework/services/input/mic.py &
 }                                       # loadOtherServices()

# main()
baseDir="$HOME/minimy"
#export PYTHONPATH="$baseDir:$baseDir/venv_ngv/lib/python3.10/site-packages"
export SVA_BASE_DIR="$baseDir"

echo "Starting Minimy..."
checkEnv
mountUmountDirs                            # unmount then remount logs and tmp dirs as tmpfs's
startSystem
loadSystemSkills 
loadUserSkills 
loadOtherServices
echo "Started Minimy ..."

